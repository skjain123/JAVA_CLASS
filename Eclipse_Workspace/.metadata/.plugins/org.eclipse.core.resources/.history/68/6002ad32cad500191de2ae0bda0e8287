/*
 * This program is an implementation of Conway's life simulation.
 * 
 * Inpsired by Jason Galbraith's youtube video tutorials on his youtube channel
 * 
 * Modified By: Sunil Jain
 * 
 * */

package Life;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JButton;
import javax.swing.JFrame;

public class Life implements MouseListener, ActionListener, Runnable
{
	
	boolean[][] cells = new boolean[10][10];
	boolean running = false;
	
	JFrame frame = new JFrame("Life Simulation");
	LifePanel panel = new LifePanel(cells);
	Container south = new Container();
	JButton step = new JButton("Step");
	JButton start = new JButton("Start");
	JButton stop = new JButton("Stop");

	public Life() 
	{
		frame.setSize(600,600);
		
		frame.setLayout(new BorderLayout());
		frame.add(panel, BorderLayout.CENTER);
		panel.addMouseListener(this);
		
		south.add(step);
		step.addActionListener(this);
		south.add(start);
		start.addActionListener(this);
		south.add(stop);
		stop.addActionListener(this);
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
	
	public static void main(String[] args)
	{
		new Life();
	}
	
	@Override
	public void actionPerformed(ActionEvent event)
	{
		if (event.getSource().equals(step) == true) 
		{
			//sdf
		} else if (event.getSource().equals(start) == true) 
		{
			running = true;
			Thread t = new Thread(this);
			t.start();
		} else if (event.getSource().equals(stop) == true) 
		{
			running = false;
		}
	}
	
	@Override
	public void run()
	{
		while (running == true) 
		{
			try 
			{
				step();
				Thread.sleep(500);
			} catch (Exception ex) 
			{
				ex.printStackTrace();
			}
		}
	}
	
	public void step() 
	{
		//sdf
	}

	@Override
	public void mouseClicked(MouseEvent event)
	{
	}

	@Override
	public void mousePressed(MouseEvent event)
	{
	}
	
	@Override
	public void mouseReleased(MouseEvent event) 
	{
		double width = (double)panel.getWidth() / cells[0].length;
		double height = (double)panel.getHeight() / cells.length;
		
		int row = Math.min(cells.length - 1,(int)(event.getY() / height));
		int column = Math.min(cells[0].length - 1,(int)(event.getX() / width));
		
		cells[row][column] = !cells[row][column];
		frame.repaint();
		System.out.println(cells);
	}

	@Override
	public void mouseEntered(MouseEvent event)
	{
	}

	@Override
	public void mouseExited(MouseEvent event)
	{
	}
}
