/**
 * Copyright (c) 2001-2019 Mathew A. Nelson and Robocode contributors
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * https://robocode.sourceforge.io/license/epl-v10.html
 */
package skj;


import robocode.HitRobotEvent;
import robocode.Robot;
import robocode.ScannedRobotEvent;
import robocode.WinEvent;
import static robocode.util.Utils.normalRelativeAngleDegrees;

import java.awt.*;


/**
 * Tracker - a sample robot by Mathew Nelson.
 * <p>
 * Locks onto a robot, moves close, fires when close.
 *
 * @author Mathew A. Nelson (original)
 * @author Flemming N. Larsen (contributor)
 */
public class MyRobot extends Robot {
	int count = 0; // Keeps track of how long we've
	// been searching for our target
	double gunTurnAmt; // How much to turn our gun when searching
	String trackName; // Name of the robot we're currently tracking

	/**
	 * run:  Tracker's main run function
	 */
	public void run() {
		// Set colors
		setBodyColor(Color.BLACK);
		setGunColor(Color.BLACK);
		setRadarColor(Color.BLACK);
		setScanColor(Color.BLACK);
		setBulletColor(Color.BLACK);

		double moveAmount = Math.max(getBattleFieldWidth(), getBattleFieldHeight());
		
		// Prepare gun
		trackName = null; // Initialize to not tracking anyone
		setAdjustGunForRobotTurn(true); // Keep the gun still when we turn
		setAdjustRadarForRobotTurn(true);
		gunTurnAmt = 10; // Initialize gunTurn to 10

		turnRight(getHeading() % 90);
		ahead(moveAmount);
		turnRight(90);
		turnGunRight(90);
		
		while (true) {
			ahead(moveAmount);
			turnRight(90);
			turnRadarRight(90);
			turnGunRight(90);
		}
	}
	
	public void onScannedRobot(ScannedRobotEvent e) {
		//sdf
	}
	
	public void onHitRobot(HitRobotEvent e) {
		//sdf
	}
}
